BANKING - Development
Created by 
James Fredric

Softwares Required (with their versions)
•	.Net Core 2.1 SDK (v2.1.300)
•	Node JS (8.11.2 LTS)
•	Node version v8.11.2 v10.4.00
•	npm version 6.1.0
•	Visual Studio Code IDE (any latest version)
•	Postman
Create a new empty folder: BANKING
•	Open command prompt with Admin privilege
•	Navigate to the BANKING folder
Create API project using .net CLI comand
BANKING >> dotnet new webapi -o BANKING.API -n BANKING.API

Create a Entity Framework test project using .net CLI comand
BANKING >> dotnet new webapi -o BANKING.API.EF -n BANKING.API.EF
Visual Studio Code - C# extensions
•	C# for visual studio (powered by omni sharp)
•	C# IDE Extensions for VSCode
•	Nuget Package Manager
Install Angular CLI in BANKING folder
BANKING >> npm install -g @angular/cli@6.0.8

Create Angular 6 project using the below command
BANKING >> ng new BANKING-WEB
Visual Studio Code - Angular Extensions
•	Angular v6/v7 snippets
•	Angular Files
•	Angular Language Service
•	Angular2-switcher
•	Auto rename tag
•	Bracket pair colorizer
•	Debugger for Chrome
•	Material Icon Theme
•	Path Intellisense
•	Prettier - code formatter
•	TSLint

Postman
Install Postman to test.net Web API project
Open BANKING project:
Open the project from the root BANKING folder using 'code .' from command prompt with admin privilege
Run .net WebAPI project
BANKING.API > dotnet run (or) dotnet watch run
Run Angular 6 project
BANKING-WEB > ng serve
On running the Angular 6 project first time, if you get any error due to 'rxjs', apply the below solution
Solution:
Open package.json
change "rxjs": "^6.0.0" to "rxjs": "6.0.0"
After changing the above line in angular project terminal, run the command => npm i
BANKING-WEB >>npm i
This will fix the above issue.

In VS Code terminal, run the below packages to install Entity Framework in API project
BANKING-API >> dotnet add package Microsoft.EntityFrameworkCore.SqlServer -v 2.1.0
BANKING-API >> dotnet add package Microsoft.EntityFrameworkCore.Design -v 2.1.0

Entity Framework Database First approach - to generate model and datacontext class
BANKING.API.EF >>
use this command for EF 
dotnet ef dbcontext scaffold 'Server=.\SQLEXPRESS;Database=Banking;Trusted_Connection=True' Microsoft.EntityFrameworkCore.SqlServer -c DataContext -o Models -f


Bootstrap and font-awesome (terminal) - (add in styles.css)
Bootstrap@4.1.1 and font-awesome@4.7.0
BANKING-WEB >> npm install bootstrap@4.1.1 font-awesome
angular.json (change the styles .css order by importing bootstrap and fontawesome in styles.css)
3rd party libraries
Library	Commands
Alertifyjs	npm install alertifyjs --save
Angular JWT	npm install @auth0/angular-jwt@2.0.0
NGX Bootstrap	npm install ngx-bootstrap@3.0.1 --save
ng add ngx-bootstrap --component collapse
Bootswatch	npm install bootswatch@4.1.1
NgxSpinner	npm install ngx-spinner --save
Telerik kendo UI Dropdown	ng add @progress/kendo-angular-dropdowns
cookies	npm install ngx-cookie-service --save
Angular material	ng add @angular/material
	
Angular Routeguards
routeguards => cd src/app/_guards => ng g guard auth --spec=false
Serilog
dotnet add package Serilog --version 2.9.0-dev-01116
dotnet add package Serilog.Sinks.RollingFile --version 3.3.1-dev-00771
dotnet add package Serilog.Sinks.RollingFile.Extension --version 2.0.2
dotnet add package Serilog.Extensions.Logging --version 3.0.0-dev-10240
Angular Build (production)
ng build --prod --build-optimizer=false
ng build (development)
API Build (publish)
dotnet publish -o D:\websites\VisionIM

Publish to IIS
In the application pool >> no managed code
.net core publish IIS (microsoft documentation) // https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?view=aspnetcore-2.2
>> Install the .NET Core Hosting Bundle
Download .NET Core 2.1 Runtime & Hosting Bundle for Windows (v2.1.10) and install in the server
Download link : https://dotnet.microsoft.com/download/thank-you/dotnet-runtime-2.1.10-windows-hosting-bundle-installer
>> After installing the above one, please do IIS reset
Open cmd window and type "iisreset"
Command to kill existing process in command prompt
netstat -ano -p TCP | find /I "listening" | find /I "2492"
taskkill /F /PID 820
